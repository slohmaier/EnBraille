"""
Auto-generated braille table name translations.
This file provides tr() calls for all available braille table names.
Generated by tools/generate_table_translations.py
"""

from typing import Dict
try:
    # Try to use the translation helper if available
    from tools import translation_helper
    def tr(text: str, context: str = "BrailleTableNames") -> str:
        """Translate braille table names using translation helper."""
        return translation_helper.tr(text)
except ImportError:
    # Fallback to Qt translation system
    from PySide6.QtCore import QCoreApplication
    def tr(text: str, context: str = "BrailleTableNames") -> str:
        """Translate braille table names with proper context."""
        return QCoreApplication.translate(context, text, text)

class BrailleTableTranslations:
    """Container for all braille table name translations."""
    
    # Dictionary mapping original table names to translation calls
    TABLE_TRANSLATIONS = {
        "Afrikaans Braille Code (Grade 2)": lambda: tr("Afrikaans Braille Code (Grade 2)"),
        "Akkadian": lambda: tr("Akkadian"),
        "Akkadian according to Borger system": lambda: tr("Akkadian according to Borger system"),
        "Arabic Computer Braille table": lambda: tr("Arabic Computer Braille table"),
        "Arabic Grade 2 table": lambda: tr("Arabic Grade 2 table"),
        "Biblical/Ancient Near Eastern language studies German system": lambda: tr("Biblical/Ancient Near Eastern language studies German system"),
        "Biblical/Ancient Near Eastern language studies US system": lambda: tr("Biblical/Ancient Near Eastern language studies US system"),
        "Chichewa (Malawi)": lambda: tr("Chichewa (Malawi)"),
        "Chinese Common Braille Scheme": lambda: tr("Chinese Common Braille Scheme"),
        "Chinese Current Braille System.": lambda: tr("Chinese Current Braille System."),
        "Chinese Hong Kong Cantonese braille Translation Table": lambda: tr("Chinese Hong Kong Cantonese braille Translation Table"),
        "Chinese double spelling Braille.": lambda: tr("Chinese double spelling Braille."),
        "Classical Hebrew": lambda: tr("Classical Hebrew"),
        "Computer Spanish 8 dots Braille table": lambda: tr("Computer Spanish 8 dots Braille table"),
        "Czech 8-dot Computer Braille Table": lambda: tr("Czech 8-dot Computer Braille Table"),
        "Danish, table for 8 dots grade 1.5, partial contraction (forward and backward translation) 1993": lambda: tr("Danish, table for 8 dots grade 1.5, partial contraction (forward and backward translation) 1993"),
        "Danish, table for 8 dots grade 2 (forward and backward translation) 1993": lambda: tr("Danish, table for 8 dots grade 2 (forward and backward translation) 1993"),
        "Danish, table for 8 dots grade 2 forward and backward translation (2022)": lambda: tr("Danish, table for 8 dots grade 2 forward and backward translation (2022)"),
        "English, U.S. grade 1 (EBAE) table": lambda: tr("English, U.S. grade 1 (EBAE) table"),
        "Filipino Braille Code (Grade 2)": lambda: tr("Filipino Braille Code (Grade 2)"),
        "Finnish 8 dot braille table": lambda: tr("Finnish 8 dot braille table"),
        "German 6 dots computer Braille table": lambda: tr("German 6 dots computer Braille table"),
        "German Grade 0 Braille": lambda: tr("German Grade 0 Braille"),
        "German Grade 0 Braille (with capitals) (unofficial and experimental)": lambda: tr("German Grade 0 Braille (with capitals) (unofficial and experimental)"),
        "German Grade 1 Braille": lambda: tr("German Grade 1 Braille"),
        "German Grade 1 Braille (with capitals) (unofficial and experimental)": lambda: tr("German Grade 1 Braille (with capitals) (unofficial and experimental)"),
        "German Grade 2 Braille": lambda: tr("German Grade 2 Braille"),
        "German Grade 2 Braille (with capitals)": lambda: tr("German Grade 2 Braille (with capitals)"),
        "Hungarian Computer Braille table": lambda: tr("Hungarian Computer Braille table"),
        "Hungarian Grade 2 table": lambda: tr("Hungarian Grade 2 table"),
        "Irish Braille Code Grade 1 uncontracted": lambda: tr("Irish Braille Code Grade 1 uncontracted"),
        "Italiano 8 punti": lambda: tr("Italiano 8 punti"),
        "Japanese Kantenji (braille kanji) Table": lambda: tr("Japanese Kantenji (braille kanji) Table"),
        "Kinyarwanda Grade 1 Braille": lambda: tr("Kinyarwanda Grade 1 Braille"),
        "Korean Grade 1 (Uncontracted)": lambda: tr("Korean Grade 1 (Uncontracted)"),
        "Korean Grade 1 (Uncontracted, 2006 edition)": lambda: tr("Korean Grade 1 (Uncontracted, 2006 edition)"),
        "Korean Grade 2 (Contracted)": lambda: tr("Korean Grade 2 (Contracted)"),
        "Korean Grade 2 (Contracted, 2006 edition)": lambda: tr("Korean Grade 2 (Contracted, 2006 edition)"),
        "Luganda Grade 1 Braille": lambda: tr("Luganda Grade 1 Braille"),
        "Malay Braille Code (Grade 2)": lambda: tr("Malay Braille Code (Grade 2)"),
        "Multi Language Coptic Computer Braille table": lambda: tr("Multi Language Coptic Computer Braille table"),
        "Northern Kurdish grade 0 braille": lambda: tr("Northern Kurdish grade 0 braille"),
        "Norwegian computer braille, 8-dot": lambda: tr("Norwegian computer braille, 8-dot"),
        "Norwegian literary braille, 6-dot, contracted level 1": lambda: tr("Norwegian literary braille, 6-dot, contracted level 1"),
        "Norwegian literary braille, 6-dot, contracted level 2": lambda: tr("Norwegian literary braille, 6-dot, contracted level 2"),
        "Norwegian literary braille, 6-dot, contracted level 3": lambda: tr("Norwegian literary braille, 6-dot, contracted level 3"),
        "Norwegian literary braille, 6-dot, uncontracted": lambda: tr("Norwegian literary braille, 6-dot, uncontracted"),
        "Norwegian literary braille, 8-dot": lambda: tr("Norwegian literary braille, 8-dot"),
        "Norwegian literary braille, 8-dot with 6-dot fallback": lambda: tr("Norwegian literary braille, 8-dot with 6-dot fallback"),
        "Persian  Grade 1 Braille table": lambda: tr("Persian  Grade 1 Braille table"),
        "Portuguese Grade 1 Braille Table": lambda: tr("Portuguese Grade 1 Braille Table"),
        "Russian literary (grade 1) text translation table": lambda: tr("Russian literary (grade 1) text translation table"),
        "Russian literary text translation table": lambda: tr("Russian literary text translation table"),
        "Russian translation table for program sources": lambda: tr("Russian translation table for program sources"),
        "Sesotho/Setswana/Sepedi braille code (grade 1)": lambda: tr("Sesotho/Setswana/Sepedi braille code (grade 1)"),
        "Sesotho/Setswana/Sepedi braille code (grade 2)": lambda: tr("Sesotho/Setswana/Sepedi braille code (grade 2)"),
        "Slovak (grade 1) text braille translation table": lambda: tr("Slovak (grade 1) text braille translation table"),
        "Spanish, Grade 2 table": lambda: tr("Spanish, Grade 2 table"),
        "Swahili (Kenya) (Grade 1.2)": lambda: tr("Swahili (Kenya) (Grade 1.2)"),
        "Swahili (Kenya) Grade 1": lambda: tr("Swahili (Kenya) Grade 1"),
        "Swahili (Kenya) Grade 1.3": lambda: tr("Swahili (Kenya) Grade 1.3"),
        "Swahili (Kenya) Grade 1.4": lambda: tr("Swahili (Kenya) Grade 1.4"),
        "Swahili (Kenya) Grade 1.5": lambda: tr("Swahili (Kenya) Grade 1.5"),
        "Swahili (Kenya) Grade 2": lambda: tr("Swahili (Kenya) Grade 2"),
        "Swedish Grade 1 Braille Table, contractions level 1.": lambda: tr("Swedish Grade 1 Braille Table, contractions level 1."),
        "Swedish Grade 2 Braille Table, contractions level 2.": lambda: tr("Swedish Grade 2 Braille Table, contractions level 2."),
        "Swedish Grade Uncontracted Braille Table": lambda: tr("Swedish Grade Uncontracted Braille Table"),
        "Syriac": lambda: tr("Syriac"),
        "Thai Current Braille System.": lambda: tr("Thai Current Braille System."),
        "Transliterated Cuneiform": lambda: tr("Transliterated Cuneiform"),
        "Tshivenda braille code (grade 1)": lambda: tr("Tshivenda braille code (grade 1)"),
        "Tshivenda braille code (grade 2)": lambda: tr("Tshivenda braille code (grade 2)"),
        "U.K. English 8 dot Computer braille table": lambda: tr("U.K. English 8 dot Computer braille table"),
        "U.K. English Grade 1 table": lambda: tr("U.K. English Grade 1 table"),
        "U.S. English 6 dot computer braille table": lambda: tr("U.S. English 6 dot computer braille table"),
        "Ugaritic": lambda: tr("Ugaritic"),
        "Uncontracted braille table for Yiddish.": lambda: tr("Uncontracted braille table for Yiddish."),
        "Uncontracted multi-language braille table for Hebrew, Arabic and English (Israel).": lambda: tr("Uncontracted multi-language braille table for Hebrew, Arabic and English (Israel)."),
        "Unified English Braille Code (Grade 1)": lambda: tr("Unified English Braille Code (Grade 1)"),
        "Unified English Braille Code (Grade 2)": lambda: tr("Unified English Braille Code (Grade 2)"),
        "Unofficial table used by some for studying classical and biblical Greek.": lambda: tr("Unofficial table used by some for studying classical and biblical Greek."),
        "Welsh Grade 1 table": lambda: tr("Welsh Grade 1 table"),
        "computer braille table for Hebrew (Israel).": lambda: tr("computer braille table for Hebrew (Israel)."),
        "isiXhosa/isiZulu braille code (grade 1)": lambda: tr("isiXhosa/isiZulu braille code (grade 1)"),
        "isiXhosa/isiZulu braille code (grade 2)": lambda: tr("isiXhosa/isiZulu braille code (grade 2)"),
    }
    
    @classmethod
    def get_translated_name(cls, table_name: str) -> str:
        """Get the translated name for a braille table."""
        if table_name in cls.TABLE_TRANSLATIONS:
            return cls.TABLE_TRANSLATIONS[table_name]()
        else:
            return table_name  # Fallback to original name
    
    @classmethod 
    def get_all_translations(cls) -> Dict[str, str]:
        """Get all translated table names as a dictionary."""
        return {name: func() for name, func in cls.TABLE_TRANSLATIONS.items()}

# Export commonly used German tables for quick access
COMMON_GERMAN_TABLES = {
    "German Grade 0 Braille": tr("German Grade 0 Braille"),
    "German Grade 1 Braille": tr("German Grade 1 Braille"), 
    "German Grade 2 Braille": tr("German Grade 2 Braille"),
    "German 6 dots computer Braille table": tr("German 6 dots computer Braille table"),
}

# Export common English tables
COMMON_ENGLISH_TABLES = {
    "English, U.S. grade 1 (EBAE) table": tr("English, U.S. grade 1 (EBAE) table"),
    "Unified English Braille Code (Grade 1)": tr("Unified English Braille Code (Grade 1)"),
    "Unified English Braille Code (Grade 2)": tr("Unified English Braille Code (Grade 2)"),
    "U.K. English Grade 1 table": tr("U.K. English Grade 1 table"),
}
