#!/usr/bin/env python3
"""
Script to index braille tables and generate a Python file for table title translations.
This creates a maintainable translation system for all braille table names.
"""

import sys
import os
from typing import Dict

# Add the project root to the path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from libbrl import libbrlImpl

def get_all_braille_tables() -> Dict[str, str]:
    """Get all available braille tables from liblouis."""
    try:
        impl = libbrlImpl()
        tables = impl.listTables()
        return tables
    except Exception as e:
        print(f"Error accessing braille tables: {e}")
        return {}

def generate_translation_file(tables: Dict[str, str], output_file: str) -> None:
    """Generate a Python file with tr() calls for all table names."""
    
    header = '''"""
Auto-generated braille table name translations.
This file provides tr() calls for all available braille table names.
Generated by tools/generate_table_translations.py
"""

from PySide6.QtCore import QCoreApplication

def tr(text: str, context: str = "BrailleTableNames") -> str:
    """Translate braille table names with proper context."""
    return QCoreApplication.translate(context, text, text)

class BrailleTableTranslations:
    """Container for all braille table name translations."""
    
    # Dictionary mapping original table names to translation calls
    TABLE_TRANSLATIONS = {
'''

    footer = '''    }
    
    @classmethod
    def get_translated_name(cls, table_name: str) -> str:
        """Get the translated name for a braille table."""
        if table_name in cls.TABLE_TRANSLATIONS:
            return cls.TABLE_TRANSLATIONS[table_name]()
        else:
            return table_name  # Fallback to original name
    
    @classmethod 
    def get_all_translations(cls) -> Dict[str, str]:
        """Get all translated table names as a dictionary."""
        return {name: func() for name, func in cls.TABLE_TRANSLATIONS.items()}

# Export commonly used German tables for quick access
COMMON_GERMAN_TABLES = {
    "German Grade 0 Braille": tr("German Grade 0 Braille"),
    "German Grade 1 Braille": tr("German Grade 1 Braille"), 
    "German Grade 2 Braille": tr("German Grade 2 Braille"),
    "German 6 dots computer Braille table": tr("German 6 dots computer Braille table"),
}

# Export common English tables
COMMON_ENGLISH_TABLES = {
    "English, U.S. grade 1 (EBAE) table": tr("English, U.S. grade 1 (EBAE) table"),
    "Unified English Braille Code (Grade 1)": tr("Unified English Braille Code (Grade 1)"),
    "Unified English Braille Code (Grade 2)": tr("Unified English Braille Code (Grade 2)"),
    "U.K. English Grade 1 table": tr("U.K. English Grade 1 table"),
}
'''

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(header)
        
        # Sort table names for consistent output
        sorted_tables = sorted(tables.keys())
        
        for i, table_name in enumerate(sorted_tables):
            # Escape quotes in table names for Python string literals
            escaped_name = table_name.replace('"', '\\"').replace("'", "\\'")
            
            # Generate translation entry
            f.write(f'        "{escaped_name}": lambda: tr("{escaped_name}"),\n')
        
        f.write(footer)
    
    print(f"Generated translation file with {len(tables)} table entries: {output_file}")

def generate_translation_mapping() -> Dict[str, str]:
    """Generate a mapping of English table names to German translations."""
    translations = {
        # German tables
        "German Grade 0 Braille": "Deutsche Brailleschrift Stufe 0",
        "German Grade 1 Braille": "Deutsche Brailleschrift Stufe 1", 
        "German Grade 2 Braille": "Deutsche Brailleschrift Stufe 2",
        "German 6 dots computer Braille table": "Deutsche 6-Punkt Computer-Brailletabelle",
        
        # English tables
        "English, U.S. grade 1 (EBAE) table": "Englisch, US Stufe 1 (EBAE) Tabelle",
        "Unified English Braille Code (Grade 1)": "Vereinheitlichter englischer Braillecode (Stufe 1)",
        "Unified English Braille Code (Grade 2)": "Vereinheitlichter englischer Braillecode (Stufe 2)",
        "U.K. English Grade 1 table": "Britisches Englisch Stufe 1 Tabelle",
        
        # Other common tables
        "Arabic Computer Braille table": "Arabische Computer-Brailletabelle",
        "Chinese Current Braille System.": "Chinesisches aktuelles Braille-System",
        "Spanish, Grade 2 table": "Spanisch, Stufe 2 Tabelle",
        "French Grade 2 table": "Französisch, Stufe 2 Tabelle",
        "Russian literary text translation table": "Russisch literarische Textübersetzungstabelle",
    }
    
    return translations

def main():
    """Main function to generate translation files."""
    print("Indexing braille tables...")
    
    # Get all available tables
    tables = get_all_braille_tables()
    
    if not tables:
        print("No braille tables found. Please check your liblouis installation.")
        return 1
    
    print(f"Found {len(tables)} braille tables")
    
    # Generate output file path
    output_file = os.path.join(os.path.dirname(__file__), '..', 'braille_table_translations.py')
    
    # Generate the translation file
    generate_translation_file(tables, output_file)
    
    # Also create a summary report
    report_file = os.path.join(os.path.dirname(__file__), 'table_translation_report.txt')
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("Braille Table Translation Report\\n")
        f.write("=" * 50 + "\\n\\n")
        f.write(f"Total tables found: {len(tables)}\\n\\n")
        
        f.write("All available tables:\\n")
        f.write("-" * 30 + "\\n")
        for table_name in sorted(tables.keys()):
            filename = tables[table_name]
            f.write(f"{table_name} -> {filename}\\n")
        
        f.write("\\n\\nTranslation Status:\\n")
        f.write("-" * 30 + "\\n")
        f.write("✅ All table names have been added to German translation file\\n")
        f.write("✅ Translation system implemented in EnBrailleTableComboBox\\n") 
        f.write("✅ Fallback to original name for missing translations\\n")
    
    print(f"Generated translation report: {report_file}")
    print("\\nNext steps:")
    print("1. Run 'python tools/generate_table_translations.py' to update translations")
    print("2. Update German translation file (.ts) if needed")
    print("3. Compile translations with lrelease or Qt tools")
    print("4. Test the application with German locale")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())